apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "app.bsmuniversal.com"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 12
        versionName "1.0.11"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            storeFile file("android-release-key.keystore")
            storePassword "BSMP@ssw0rd"
            keyAlias "releasekey"
            keyPassword "BSMP@ssw0rd"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "USE_LOG", "false"
            signingConfig signingConfigs.release
        }
        debug {
            buildConfigField "boolean", "USE_LOG", "true"
        }
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'MissingTranslation', 'ExtraTranslation'
        abortOnError false
    }
}

def getGitCommitVersion() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short' , 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getDate() {
    new Date().format('YYMMdd')
}

// generate version information for jenkins
task getBuildAppInfo {
    println "Build-Version: " + android.defaultConfig.versionName + '.' + getDate() + '-' + getGitCommitVersion()
}

project.afterEvaluate {
    preBuild.dependsOn getBuildAppInfo
}

// copy successful build output to apk repository if providing 'release.storage.path'
// final apk file name format:  ELD_v<Version>_<YYmmdd><p|d>_<githash>.apk
gradle.buildFinished{ result ->
    if(result.getFailure() == null) {

        // this copy action ONLY perform when -Drelease.storage.path provided
        if ( System.getProperty("release.storage.path") != null ) {

            def storagePath= System.getProperty("release.storage.path") + getDate() +'/'
            def serverFlag='p'
            if ( System.getProperty("build.target").equalsIgnoreCase( 'DEV' )  ) {
                serverFlag='d'
            }

            def appName='ELD_v' + android.defaultConfig.versionName + '_' + getDate() + serverFlag + '_' + getGitCommitVersion()

            println "Copy build result to: " + storagePath + appName

            copy {
                from 'build/outputs/apk'
                into storagePath
                include 'app-release.apk'
                rename { String fileName ->
                    fileName.replace('app-release', appName)
                }
            }
			
			// rename local apk file in order for Jenkins uploading to external FTP
			copy {
                from 'build/outputs/apk'
                into 'build/outputs/apk'
                include 'app-release.apk'
                rename { String fileName ->
                    fileName.replace('app-release', appName)
                }
            }
        }
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url 'https://maven.google.com' }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'

    compile 'android.arch.persistence.room:runtime:1.0.0-alpha1'
    compile 'android.arch.persistence.room:rxjava2:1.0.0-alpha1'
    annotationProcessor 'android.arch.persistence.room:compiler:1.0.0-alpha1'

    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'

    compile 'com.google.dagger:dagger:2.10'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.10'

    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'

    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'

    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'

    compile 'me.dm7.barcodescanner:zxing:1.9.3'

    compile 'com.jakewharton.timber:timber:4.5.1'

    compile 'org.apache.commons:commons-lang3:3.5'
}
